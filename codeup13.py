# 13. 기초-종합
'''
[78] 짝수 합 구하기
정수(1 ~ 100) 1개를 입력받아 1부터 그 수까지 짝수의 합을 구해보자.

입력
정수 1개가 입력된다. (0 ~ 100)
5

출력
1부터 입력된 수까지 짝수의 합을 출력한다.
6

Tip:
range()함수의 첫 인자를 2로하고,
세 번째 인자를 2로 하면 2에서 2씩 증가하기 때문에 모든 숫자가 짝수가 된다.
따라서 이를 모두 더해주면 되는 것.
'''
num = int(input('입력 : '))

answer = 0
for i in range(2, num+1, 2):
  answer += i
print(answer)

'''
[79] 원하는 문자가 입력될 때까지 반복 출력하기
'q'가 입력될 때까지 입력한 문자를 계속 출력하는 프로그램을 작성해보자.

입력
문자들이 1개씩 계속해서 입력된다.
x b k d l q g a c

출력
'q'가 입력될 때까지 입력된 문자를 줄을 바꿔 한 줄씩 출력한다.
x
b
k
d
l
q

Tip:
입력값이 공백을 기준으로 한 번에 입력되기 때문에
input()을 매번 호출할 필요가 없다.
입력된 문자열의 길이만큼만 반복하여 출력하면 되기에 for()문을 사용해도 된다.
'''
word = input('입력 : ') .split()

for w in word:
  print(w)
  if w == 'q': break
  
'''
[80]
언제까지 더해야 할까?

1, 2, 3 ... 을 계속 더해 나갈 때,
그 합이 입력한 정수(0 ~ 1000)보다 같거나 작을 때까지
계속 더하는 프로그램을 작성해보자.

즉, 1부터 n까지 정수를 계속 더한다고 할 때,
어디까지 더해야 입력한 수보다 같거나 커지는지 알아보고자 하는 문제이다.

입력
정수 1개가 입력된다.
55

출력
1, 2, 3, 4, 5 ... 를 순서대로 계속 더해 합을 만들어가다가,
입력된 정수와 같거나 커졌을 때, 마지막에 더한 정수를 출력한다.
10
'''
end_point = int(input())

total = 0
i = 0
while total < end_point:
  i += 1
  total += i
print( i )

'''
[81]
주사위를 2개 던지면?

1부터 n까지, 1부터 m까지 숫자가 적힌 서로 다른
주사위 2개를 던졌을 때 나올 수 있는 모든 경우를 출력해보자.

입력
주사위 2개의 면의 개수 n, m이 공백을 두고 입력된다.
단, n, m은 10이하의 자연수
2 3

출력
나올 수 있는 주사위의 숫자를 한 세트씩 줄을 바꿔 모두 출력한다.
첫 번째 수는 n, 두 번째 수는 m으로 고정해 출력하도록 한다.
1 1
1 2
1 3
2 1
2 2
2 3

Tip:
중첩의 원리...
반복 실행 구조도 조건 실행 구조와 마찬가지로 중첩의 원리가 적용된다.
반복 실행 구조를 중첩하면 원하는 반복 구조를 다양하게 만들어 낼 수 있다.
'''
n, m = map(int, input('입력 : ') .split())

for n in range(1, n+1):
  for m in range(1, m+1):
    print(n, m)
    
'''
[82]
16진수 구구단

16진수(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F)를
배운 영일(01)이는 16진수끼리 곱하는 16진수 구구단에 대해서 궁금해졌다.

A, B, C, D, E, F 중 하나가 입력될 때,
1부터 F까지 곱한 16진수 구구단의 내용을 출력해보자.
(단, A ~ F 까지만 입력된다.)

입력
16진수로 한 자리 수가 입력된다.
단, A ~ F 까지만 입력된다.
B

출력
입력된 16진수에 1~F까지 순서대로 곱한, 16진수 구구단을 줄을 바꿔 출력한다.
계산 결과도 16진수로 출력해야 한다.
B*1=B
B*2=16
B*3=21
B*4=2C
B*5=37
B*6=42
B*7=4D
B*8=58
B*9=63
B*A=6E
B*B=79
B*C=84
B*D=8F
B*E=9A
B*F=A5

Tip:
16진수 변환 함수 hex()를 이용해보자.
소문자를 대문자로 변환하는 함수는 문자열의 메소드 중 upper()가 있다.
'''
char = input('입력 : ')

for i in range(1, 16):
  print( '%s*%s=%s' %(char, hex(i)[2:].upper(),
                      hex(int(char, 16) * i)[2:].upper()))

'''
[83]
3 6 9 게임의 왕이 되자

3 6 9 게임을 하던 영일이는 3 6 9 게임에서
잦은 실수로 계속해서 벌칙을 받게 되었다.
3 6 9 게임의 왕이 되기 위한 마스터 프로그램을 작성해 보자.

**3 6 9 게임은?**
여러 사람이 순서를 정해 순서대로 수를 부르는 게임이다.
만약 3, 6, 9 가 들어간 수를 자신이 불러야 하는 상황이면,
대신 "박수" 를 쳐야 한다.
33까지 진행했다면? "짝짝"과 같이 박수를 두 번 치는 형태도 있다.

입력
10 보다 작은 정수 1개가 입력된다. (1 ~ 9)
9

출력
1 부터 그 수까지 순서대로 공백을 두고 수를 출력하는데,
3 또는 6 또는 9인 경우 그 수 대신 영문 대문자 X 를 출력한다.
1 2 X 4 5 X 7 8 X

Tip:
원래 369 게임은 숫자 중 3,6,9가 포함되어 있을 때 박수를 치는 게임이다.
따라서 #2의 코드가 정답이어야 하지만 코드업에서는
3의 배수를 정답으로 처리하므로 #1과 같이 풀어야한다.
결론 : 3의 배수일 때 'X'가 출력되도록 해야한다.
'''
num = int(input('입력 : '))

for i in range(1, num+1):
  count = i if i % 3 else 'X'
  print(count, end=' ')
  
'''
[84]
빛 섞어 색 만들기

빨강(red), 초록(green), 파랑(blue)
빛을 섞어 여러 가지 빛의 색을 만들어 내려고 한다.

빨강(r), 초록(g), 파랑(b) 각각의 빛의 개수가 주어질 때,
(빛의 강약에 따라 0 ~ n-1 까지 n가지의 빛 색깔을 만들 수 있다.)

주어진 rgb 빛들을 다르게 섞어 만들 수 있는 모든 경우의 조합(r g b)과
총 가짓 수를 계산해보자.

입력
빨녹파(r, g, b) 각 빛의 강약에 따른 가짓수(0 ~ 128))가
공백을 사이에 두고 입력된다.
예를 들어, 3 3 3 은 각 색깔 빛에 대해서
그 강약에 따라 0~2까지 3가지의 색이 있음을 의미한다.
2 2 2

출력
만들 수 있는 rgb 색의 정보를
오름차순(계단을 올라가는 순, 12345... abcde..., 가나다라마...)으로
줄을 바꿔 모두 출력하고, 마지막에 그 개수를 출력한다.
0 0 0
0 0 1
0 1 0
0 1 1
1 0 0
1 0 1
1 1 0
1 1 1
8
'''
r, g, b = map(int, input('입력 : ') .split())

count = 0
for i in range(r):
  for j in range(g):
    for k in range(b):
      print(i, j, k)
      count += 1
print(count)

'''
[85]
소리 파일 저장용량 계산하기

**서론**
소리가 컴퓨터에 저장될 때에는 디지털 데이터화 되어 저장된다.

마이크를 통해 1초에 적게는 수십 번, 많게는 수만 번 소리의 강약을 체크해
그 값을 정수값으로 바꾸고, 그 값을 저장해 소리를 파일로 저장할 수 있다.

값을 저장할 때에는 비트를 사용하는 정도에 따라
세세한 녹음 정도를 결정할 수 있고,
좌우(스테레오) 채널로 저장하면 2배… 5.1채널이면 6배의 저장공간이 필요하고,
녹음 시간이 길면 그 만큼 더 많은 저장공간이 필요하다.

1초 동안 마이크로 소리강약을 체크하는 수를 h
(헤르츠, Hz 는 1초에 몇 번? 체크하는가를 의미한다.)

한 번 체크한 결과를 저장하는 비트 b
(2비트를 사용하면 0 또는 1 두 가지, 16비트를 사용하면 65536가지..)

좌우 등 소리를 저장할 트랙 개수인 채널 c
(모노는 1개, 스테레오는 2개의 트랙으로 저장함을 의미한다.)

녹음할 시간 s가 주어질 때, 필요한 저장 용량을 계산하는 프로그램을 작성해보자.

**문제의 핵심 포인트**
실제로 일반적인 CD 음질(44.1KHz, 16bit, 스테레오)로 1초 동안 저장하려면
44100 * 16 * 2 * 1 bit의 저장공간이 필요
이렇게 녹음하는 방식을 PCM(Pulse Code Modulation) 방법이라고 하는데,
압축하지 않은 순수한(raw) 소리 데이터 파일은 대표적으로 *.wav 가 있다.

**틈새 자료구조**
8 bit(비트)           = 1byte(바이트)
1024 Byte(2^10 byte) = 1KB(킬로 바이트) 
1024 KB(2^10 KB)     = 1MB(메가 바이트)
1024 MB(2^10 MB)     = 1GB(기가 바이트)
1024 GB(2^10 GB)     = 1TB(테라 바이트)
입력
h, b, c, s 가 공백을 두고 입력된다.
h는 48,000이하, b는 32이하(단, 8의배수),
c는 5이하, s는 6,000이하의 자연수이다.
44100 16 2 10

출력
필요한 저장 공간을 MB 단위로 바꾸어 출력한다.
단, 소수점 둘째 자리에서 반올림해
첫째 자리까지 출력하고 MB를 공백을 두고 출력한다.
1.7 MB

Tip:
음질의 1초 동안 저장 공간 / MB
'h' x 'b' x 'c' x 's' / ('8' x '1024' x '1024')
'''
h, b, c, s = map(int, input('입력 : ') .split())

result = h*b*c*s
resultMB = result / (8 * 1024**2)
print(round(resultMB, 1), 'MB')

'''
[86]
그림 파일 저장용량 계산하기

**서론**
이미지가 컴퓨터에 저장될 때에도 디지털 데이터화 되어 저장된다.

가장 기본적인 방법으로는 그림을 구성하는 한 점(pixel, 픽셀)의 색상을
빨강(r), 초록(g), 파랑(b)의 3가지의
빛의 세기 값으로 따로 변환하여 저장하는 것인데,

예를 들어 r, g, b 각 색에 대해서
8비트(0~255, 256가지 가능)씩을 사용한다고 하면,

한 점의 색상은 3가지 r, g, b의 8비트+8비트+8비트로 총 24비트로 표현해서
총 2^24 가지의 서로 다른 빛의 색깔을 사용할 수 있는 것이다.

그렇게 저장하는 점을 모아 하나의 큰 이미지를 저장할 수 있게 되는데,
1024 * 768 사이즈에 각 점에 대해 24비트로 저장하면 그 이미지를 저장하기 위한
저장 용량을 계산할 수 있다.
이미지의 가로 해상도 w, 세로 해상도 h,
한 픽셀을 저장하기 위한 비트 b 가 주어질 때,
압축하지 않고 저장하기 위해 필요한 저장 용량을 계산하는 프로그램을 작성해 보자.

**문제의 핵심 포인트**
실제로 일반적인 1024 * 768 사이즈(해상도)의 각점에 대해
24비트(rgb 각각 8비트씩 3개)로 저장하려면
1024 * 768 * 24 bit의 저장 용량이 필요하다.
이렇게 이미지의 원래(raw) 데이터를 압축하지 않고 그대로 저장하는
대표적인 이미지 파일이 *.bmp 파일이며,
비트로 그림을 구성한다고 하여 비트맵 방식 또는 래스터 방식이라고 한다.

**틈새 자료구조**
8 bit(비트)           = 1byte(바이트)
1024 Byte(2^10 byte) = 1KB(킬로 바이트) 
1024 KB(2^10 KB)     = 1MB(메가 바이트)
1024 MB(2^10 MB)     = 1GB(기가 바이트)
1024 GB(2^10 GB)     = 1TB(테라 바이트)

입력
w, h, b 가 공백을 두고 입력된다. 단, w, h는 모두 정수이고 1~1024 이다.
b는 40이하의 4의 배수이다.
1024 768 24

출력
필요한 저장 공간을 MB 단위로 바꾸어 출력한다.
소수점 이하 셋째 자리에서 반올림해 둘째 자리까지 출력한 뒤 MB를 출력한다.
2.25 MB

Tip:
1024 * 768 사이즈(해상도)의 각점에 대해
24비트(rgb 각각 8비트씩 3개)로 저장하려면
1024 * 768 * 24 bit의 저장 용량이 필요하다.
'''
w, h, b = map(int, input('입력 : ') .split())
result = (w * h * b) / (8 * 1024**2)
print(round(result, 2), 'MB')

'''
[87]
여기까지! 이제 그만~

1, 2, 3 ... 을 순서대로 계속 더해나갈 때,
그 합이 입력한 정수보다 작을 동안만 계속 더하는 프로그램을 작성해보자.

즉, 1부터 n까지 정수를 계속 더한다고 할 때,
어디까지 더해야 입력한 수보다 같거나 커지는지 알아보고자 하는 문제이다.

하지만, 이번에는 그 때의 합을 출력해야 한다.

예를 들어 57을 입력하면 1+2+3+...+8+9+10=55에 다시 11을 더해 66이 될 때,
그 값 66이 출력되어야 한다.

입력
언제까지 합을 계산할 지, 정수 1개를 입력받는다.
단, 입력되는 자연수는 100,000,000이하이다.
57

출력
1, 2, 3, 4, 5 ... 순서대로 계속 더해가다가,
그 합이 입력된 정수보다 커지거나 같아지는 경우, 그때까지의 합을 출력한다.
66
'''
end_point = int(input('입력 : '))
total = 0
i = 1
while total < end_point:
  total += i
  i += 1
print( total )

'''
[88] 3의 배수는 통과?

1부터 입력한 정수까지 1씩 증가시켜 출력하는 프로그램을 작성하되,
3의 배수인 경우는 출력하지 않도록 만들어보자.

예를 들면, 1 2 4 5 7 8 10 11 13 14 ... 와 같이 출력하는 것이다.

입력
정수 1개를 입력받는다.
(1 ~ 100)
10

출력
1부터 입력한 정수보다 작거나 같을 때까지 1씩 증가시켜 출력하되,
3의 배수는 출력하지 않는다.
1 2 4 5 7 8 10

Tip:
반복문 안에서 continue;가 실행되면 그 아래의 내용을 건너뛰고,
다음 반복을 수행한다. 즉, 다음 반복으로 넘어가는 것이다.
'''
num = int(input('입력 : '))

for i in range(1, num+1):
  if i%3:
    print(i, end=' ')
    
'''
[89]
수 나열하기1

어떤 규칙에 따라 수를 순서대로 나열한 것을 수열(series)이라고 한다.

예를 들어 1 4 7 10 13 16 19 22 25 ... 은 1부터 시작해
이전에 만든 수에 3을 더해 다음 수를 만든 수열이다.

이러한 것을 수학에서는 앞뒤 수들의 차이가 같다고 하여
등차(차이가 같다의 한문 말) 수열이라고 한다.
수열을 알게 된 영일이는 갑자기 궁금해졌다.

"그럼.... 123번째 나오는 수는 뭘까?"

영일이는 프로그램을 만들어 더 큰 수도 자동으로 계산하고 싶어졌다.

시작 값(a), 등차(d), 몇 번째인지를 나타내는 정수(n)가 입력될 때
n번째 수를 출력하는 프로그램을 만들어보자.

입력
시작 값(a), 등차의 값(d), 몇 번째 수 인지를 의미하는 정수(n)가
공백을 두고 입력된다.(모두 0 ~ 100)
1 3 5

출력
n번째 수를 출력한다.
13

Tip:
등차수열 리스트를 생성하고, 이것의 길이가 n값이 될 때까지 등차값을 추가한다.
리스트의 마지막 값이 'n번째 수'가 되므로
마지막 값을 출력하면 된다. => '문자열'[-1] 을 하면 된다.
'''
a, d, n = map(int, input('입력 : ') .split())

i = a
count = 0
arith = []
while count < n:
  arith.append(i)
  i += d
  count += 1
print(arith[-1])

'''
[90]
수 나열하기2

어떤 규칙에 따라 수를 순서대로 나열한 것을 수열이라고 한다.

예를 들어 2 6 18 54 162 486 ... 은 2부터 시작해
이전에 만든 수에 3을 곱해 다음 수를 만든 수열이다.

이러한 것을 수학에서는 앞뒤 수들의 비율이 같다고 하여
등비(비율이 같다의 한문 말) 수열이라고 한다.

등비 수열을 알게된 영일이는 갑자기 궁금해졌다.

"그럼.... 13번째 나오는 수는 뭘까?"

영일이는 프로그램을 만들어 더 큰 수도 자동으로 계산하고 싶어졌다.

시작 값(a), 등비(r), 몇 번째인지를 나타내는 정수(n)가 입력될 때
n번째 수를 출력하는 프로그램을 만들어보자.

입력
시작 값(a), 등비의 값(r), 몇 번째 인지를 나타내는 정수(n)가
공백을 두고 입력된다.(모두 0 ~ 10)
2 3 7

출력
n번째 수를 출력한다.
1458

Tip:
등비수열 리스트를 생성하고, 이것의 길이가 n값이 될 때까지 등비값을 추가한다.
리스트의 마지막 값이 'n번째 수'가 되므로 마지막 값을 출력하면 된다.
=> '문자열'[-1] 을 하면 된다.
'''
a, r, n = map(int, input('입력 : ') .split())

i = a
count = 0
geom = []
while count < n:
  geom.append(i)
  i *= r
  count += 1
print(geom[-1])

'''
[91]
수 나열하기3

어떤 규칙에 따라 수를 순서대로 나열한 것을 수열이라고 한다.

예를 들어 1 -1 3 -5 11 -21 43 ... 은 1부터 시작해
이전에 만든 수에 -2를 곱한 다음 1을 더해 다음 수를 만든 수열이다.

이런 이상한 수열을 알게 된 영일이는 또 궁금해졌다.

"그럼.... 13번째 나오는 수는 뭘까?"

영일이는 물론 수학을 아주 잘하지만 이런 문제는 본 적이 거의 없었다...

그래서 프로그램을 만들어 더 큰 수도 자동으로 계산하고 싶어졌다.

시작 값(a), 곱할 값(m), 더할 값(d),
몇 번째인지를 나타내는 정수(n)가 입력될 때,
n번째 수를 출력하는 프로그램을 만들어보자.

입력
시작 값(a), 곱할 값(m), 더할 값(d), 몇 번째 인지를 나타내는 정수(n)가 공백을 두고 입력된다.
(a, m, d는 -50 ~ +50, n은 10이하의 자연수)
1 -2 1 8

출력
n번째 수를 출력한다.
-85

Tip:
이상한 수열 리스트를 생성하고,
이것의 길이가 n값이 될 때까지 이상한(?)값을 추가한다.
리스트의 마지막 값이 'n번째 수'가 되므로 마지막 값을 출력하면 된다.
=> '문자열'[-1] 을 하면 된다.
'''
a, m, d, n = map(int, input('입력 : ') .split())

i = a
prog = []
while len(prog) < n:
  prog.append(i)
  i = i*m+d
print(prog[-1])

'''
[92]
함께 문제 푸는 날

같은 날 동시에 가입한 3명의 사람들이 온라인 채점시스템에 들어와
문제를 푸는 날짜가 매우 규칙적이라고 할 때,
다시 모두 함께 문제를 풀게 되는 그날은 언제일까?

예를 들어 3명이 같은 날 가입/등업하고, 각각 3일마다,
7일마다, 9일마다 한 번씩 들어온다면,
처음 가입하고 63일 만에 다시 3명이 함께 문제를 풀게 된다.

입력
같은 날 동시에 가입한 인원 3명이 규칙적으로 방문하는,
방문 주기가 공백을 두고 입력된다.
(단, 입력값은 100이하의 자연수이다.)
3 7 9

출력
3명이 다시 모두 함께 방문해
문제를 풀어보는 날(동시 가입/등업 후 며칠 후?)을 출력한다.
63

Tip:
세 방문 주기의 최소 공배수를 구해보자.
'''
a, b, c = map(int, input('입력 : ') .split())
day = 1
while day % a != 0 or day % b != 0 or day % c != 0:
  day += 1
print(day)

day = 1
while 1:
  day += 1
  if day % a == 0 and day % b == 0 and day % c == 0: break
print(day)